apply plugin: 'com.android.application'
apply plugin: 'android-apt'

android {
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.garfield.weishu"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 8
        versionName "1.0"
    }
    signingConfigs {
        release {
            storeFile file("../MyAndroid.jks")
            storePassword "android"
            keyAlias "weishu"
            keyPassword "android"
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    sourceSets.main{
        //jni.srcDirs 'src/main/source'
        //jniLibs.srcDir 'src/main/libs'    //编译成功的so，会存放在目录
        //jni.srcDirs = []    //将gradle的jni源目录设置为空，禁用gradle自带的ndk编译
    }
    lintOptions {
        abortOnError false   //编译时屏蔽掉lint检查,即使有报错也不会停止打包
    }
    defaultConfig {
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a' //, 'x86', 'x86_64'
        }
    }
    productFlavors {
        gaowei {}
        xiaomi {
//            applicationIdSuffix "xiaomi"
//            resValue "string", "app_name", "xiaomi"
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith(".apk")) {
                def fileName;
                if (variant.buildType.name == "release") {
                    fileName = "weishu_${variant.productFlavors[0].name}_" + getReleaseTime() + ".apk"
                } else {
                    fileName = "weishu_debug_" + getReleaseTime() + ".apk"
                }
                output.outputFile = new File(outputFile.parent, fileName);
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile project(':baselib')
    compile 'com.afollestad.material-dialogs:core:0.9.2.3'
    compile 'com.github.chrisbanes:PhotoView:1.3.0'
    apt 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.jakewharton:butterknife:8.4.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.netease.nimlib:basesdk:3.4.0'
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
}

static def getReleaseTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC")).toString();
}